(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["cc9a5de9"],{cc9a5de9:function(a,e,t){"use strict";t.d(e,"__esModule",{value:!0}),t.d(e,"texts",{enumerable:!0,get:function(){return d;}}),t("d966f33a");let d=[{value:"@antv/g6",paraId:0},{value:" > ",paraId:1},{value:"Watermark",paraId:2},{value:"Watermark",paraId:3,tocIndex:0},{value:"export declare class Watermark extends BasePlugin<WatermarkOptions>\n",paraId:4,tocIndex:0},{value:"Extends:",paraId:5,tocIndex:0},{value:" ",paraId:5,tocIndex:0},{value:"BasePlugin",paraId:6,tocIndex:0},{value:"<",paraId:5,tocIndex:0},{value:"WatermarkOptions",paraId:7,tocIndex:0},{value:">",paraId:5,tocIndex:0},{value:" Support using text and image as watermark, the principle is to add the ",paraId:8,tocIndex:0},{value:"background-image",paraId:8,tocIndex:0},{value:" property to the div of the Graph container, and then you can control the position and style of the watermark through css. For text, it will be converted to an image using a hidden canvas",paraId:8,tocIndex:0},{value:"Constructor",paraId:9,tocIndex:1},{value:"Modifiers",paraId:10,tocIndex:1},{value:"Description",paraId:11,tocIndex:1},{value:"(constructor)(context, options)",paraId:12,tocIndex:1},{value:"Constructs a new instance of the ",paraId:13,tocIndex:1},{value:"Watermark",paraId:13,tocIndex:1},{value:" class",paraId:13,tocIndex:1},{value:"Property",paraId:14,tocIndex:2},{value:"Modifiers",paraId:15,tocIndex:2},{value:"Type",paraId:16,tocIndex:2},{value:"Default Value",paraId:17,tocIndex:2},{value:"Description",paraId:18,tocIndex:2},{value:"defaultOptions",paraId:19,tocIndex:2},{value:"static",paraId:20,tocIndex:2},{value:"Partial<",paraId:21,tocIndex:2},{value:"WatermarkOptions",paraId:22,tocIndex:2},{value:">",paraId:21,tocIndex:2}];}}]);
//# sourceMappingURL=cc9a5de9-async.e83460f3.js.map