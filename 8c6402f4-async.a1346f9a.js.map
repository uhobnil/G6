{"version":3,"sources":["docs/manual/getting-started/step-by-step.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/getting-started/step-by-step.zh.md?watch=parent';\n  export const texts = [{\"value\":\"本教程将引导你从头开始完成一个 G6 图表开发，并在过程中了解和学习 G6 的主要概念。\",\"paraId\":0},{\"value\":\"我们将使用 Vite 来创建一个简单的前端应用。\",\"paraId\":1,\"tocIndex\":0},{\"value\":\"首先创建一个空目录：\",\"paraId\":2,\"tocIndex\":1},{\"value\":\"mkdir g6-tutorial\\n\\ncd g6-tutorial\\n\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"初始化项目：\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"npm init -y\\n\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"安装 G6：\",\"paraId\":6,\"tocIndex\":1},{\"value\":\"npm install @antv/g6 --save\\n\",\"paraId\":7,\"tocIndex\":1},{\"value\":\"Vite 是一个新型的前端构建工具，它基于 ESModule，可以快速启动项目。\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"安装 Vite：\",\"paraId\":9,\"tocIndex\":1},{\"value\":\"npm install vite --save-dev\\n\",\"paraId\":10,\"tocIndex\":1},{\"value\":\"在 \",\"paraId\":11,\"tocIndex\":1},{\"value\":\"package.json\",\"paraId\":11,\"tocIndex\":1},{\"value\":\" 中添加启动脚本：\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"{\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\"\\n  }\\n}\\n\",\"paraId\":12,\"tocIndex\":1},{\"value\":\"创建 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"index.html\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 和 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"main.ts\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 文件，内容如下：\",\"paraId\":13,\"tocIndex\":2},{\"value\":\"index.html\",\"paraId\":14,\"tocIndex\":2},{\"value\":\"：\",\"paraId\":14,\"tocIndex\":2},{\"value\":\"<!doctype html>\\n<html>\\n  <head>\\n    <title>@antv/g6 Tutorial</title>\\n  </head>\\n  <body>\\n    <div id=\\\"container\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"main.ts\\\"></script>\\n  </body>\\n</html>\\n\",\"paraId\":15,\"tocIndex\":2},{\"value\":\"main.ts\",\"paraId\":16,\"tocIndex\":2},{\"value\":\"：\",\"paraId\":16,\"tocIndex\":2},{\"value\":\"alert('Hello, G6!');\\n\",\"paraId\":17,\"tocIndex\":2},{\"value\":\"npm run dev\\n\",\"paraId\":18,\"tocIndex\":3},{\"value\":\"打开浏览器访问终端中输出的地址（通常为：\",\"paraId\":19,\"tocIndex\":3},{\"value\":\"http://127.0.0.1:5173/\",\"paraId\":19,\"tocIndex\":3},{\"value\":\" ），你将看到一个弹窗显示 \\\"Hello, G6!\\\"。\",\"paraId\":19,\"tocIndex\":3},{\"value\":\"接下来，我们将使用 G6 创建一个简单的图表。\",\"paraId\":20,\"tocIndex\":4},{\"value\":\"G6 使用 JSON 格式的数据来描述图，通常包括节点和边。我们将使用下面准备的数据：\",\"paraId\":21,\"tocIndex\":5},{\"value\":\"const data = {\\n  nodes: [\\n    { id: 'node-1', style: { x: 50, y: 50 } },\\n    { id: 'node-2', style: { x: 150, y: 50 } },\\n  ],\\n  edges: [{ source: 'node-1', target: 'node-2' }],\\n};\\n\",\"paraId\":22,\"tocIndex\":5},{\"value\":\"数据中包括两个节点和一条边，节点的 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"id\",\"paraId\":23,\"tocIndex\":5},{\"value\":\" 属性是必须的，并在 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"style\",\"paraId\":23,\"tocIndex\":5},{\"value\":\" 设置了每个节点的位置。边的 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"source\",\"paraId\":23,\"tocIndex\":5},{\"value\":\" 和 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"target\",\"paraId\":23,\"tocIndex\":5},{\"value\":\" 属性分别表示边的起始节点 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"id\",\"paraId\":23,\"tocIndex\":5},{\"value\":\" 和结束节点 \",\"paraId\":23,\"tocIndex\":5},{\"value\":\"id\",\"paraId\":23,\"tocIndex\":5},{\"value\":\"。\",\"paraId\":23,\"tocIndex\":5},{\"value\":\"创建一个图表实例，传入一个配置对象，包括容器和数据，然后调用 \",\"paraId\":24,\"tocIndex\":6},{\"value\":\"render\",\"paraId\":24,\"tocIndex\":6},{\"value\":\" 方法渲染图表：\",\"paraId\":24,\"tocIndex\":6},{\"value\":\"import { Graph } from '@antv/g6';\\n\\nconst graph = new Graph({\\n  container: 'container',\\n  data: {\\n    nodes: [\\n      { id: 'node-1', style: { x: 50, y: 50 } },\\n      { id: 'node-2', style: { x: 150, y: 50 } },\\n    ],\\n    edges: [{ source: 'node-1', target: 'node-2' }],\\n  },\\n});\\n\\ngraph.render();\\n\",\"paraId\":25,\"tocIndex\":6},{\"value\":\"如下所示，可以看到图表已经顺利绘制出来：\",\"paraId\":26,\"tocIndex\":6},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: [\\n        { id: 'node-1', style: { x: 50, y: 50 } },\\n        { id: 'node-2', style: { x: 150, y: 50 } },\\n      ],\\n      edges: [{ source: 'node-1', target: 'node-2' }],\\n    },\\n  },\\n  { width: 200, height: 100 },\\n);\\n\",\"paraId\":27,\"tocIndex\":6},{\"value\":\"接下来将介绍如何配置画布中的元素样式和种类。\",\"paraId\":28,\"tocIndex\":7},{\"value\":\"G6 提供了多种机制来配置元素样式，可以在数据中进行配置，也可以在图表实例中进行配置。前面的示例中，我们在数据中配置了节点的位置，接下来我们在图配置项中配置节点和边的样式：\",\"paraId\":29,\"tocIndex\":7},{\"value\":\"import { Graph } from '@antv/g6';\\n\\nconst graph = new Graph({\\n  container: 'container',\\n  data: {\\n    nodes: [\\n      { id: 'node-1', style: { x: 50, y: 50 } },\\n      { id: 'node-2', style: { x: 150, y: 50 } },\\n    ],\\n    edges: [{ source: 'node-1', target: 'node-2' }],\\n  },\\n  node: {\\n    style: {\\n      fill: 'pink',\\n    },\\n  },\\n  edge: {\\n    style: {\\n      stroke: 'lightgreen',\\n    },\\n  },\\n});\\n\\ngraph.render();\\n\",\"paraId\":30,\"tocIndex\":7},{\"value\":\"正如代码所示，我们在图表实例中配置了节点的填充颜色为粉色，边的描边颜色为浅绿色。你可以在下面的示例中看到效果：\",\"paraId\":31,\"tocIndex\":7},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: [\\n        { id: 'node-1', style: { x: 50, y: 50 } },\\n        { id: 'node-2', style: { x: 150, y: 50 } },\\n      ],\\n      edges: [{ source: 'node-1', target: 'node-2' }],\\n    },\\n    node: {\\n      style: {\\n        fill: 'pink',\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n  },\\n  { width: 200, height: 100 },\\n);\\n\",\"paraId\":32,\"tocIndex\":7},{\"value\":\"其中的关键部分是 \",\"paraId\":33,\"tocIndex\":7},{\"value\":\"node.style\",\"paraId\":33,\"tocIndex\":7},{\"value\":\" 和 \",\"paraId\":33,\"tocIndex\":7},{\"value\":\"edge.style\",\"paraId\":33,\"tocIndex\":7},{\"value\":\" 配置项，分别用来配置节点和边的样式。\",\"paraId\":33,\"tocIndex\":7},{\"value\":\"在后续的代码示例中，我们仅展示配置项的部分代码，本项目的完整代码请查看 \",\"paraId\":34,\"tocIndex\":7},{\"value\":\"完整示例\",\"paraId\":34,\"tocIndex\":7},{\"value\":\"。\",\"paraId\":34,\"tocIndex\":7},{\"value\":\"下面我们将通过设置节点的类型来展示更多的节点种类：\",\"paraId\":35,\"tocIndex\":7},{\"value\":\"{\\n  node: {\\n    type: (datum) => datum.id === 'node-1' ? 'circle' : 'rect',\\n    style: {\\n      fill: 'pink',\\n      size: 20\\n    }\\n  }\\n}\\n\",\"paraId\":36,\"tocIndex\":7},{\"value\":\"上面的代码中，我们设置了节点的 \",\"paraId\":37,\"tocIndex\":7},{\"value\":\"type\",\"paraId\":37,\"tocIndex\":7},{\"value\":\" 属性，其值可以是一个字符串，也可以是一个函数。当 \",\"paraId\":37,\"tocIndex\":7},{\"value\":\"type\",\"paraId\":37,\"tocIndex\":7},{\"value\":\" 是一个函数时，函数的参数是当前节点的数据对象，函数的返回值是节点的类型。\",\"paraId\":37,\"tocIndex\":7},{\"value\":\"同样的，元素中 \",\"paraId\":38,\"tocIndex\":7},{\"value\":\"style\",\"paraId\":38,\"tocIndex\":7},{\"value\":\" 样式下的每个属性都可以是一个函数，函数的参数是当前元素的数据对象。\",\"paraId\":38,\"tocIndex\":7},{\"value\":\"你甚至可以将整个 \",\"paraId\":39,\"tocIndex\":7},{\"value\":\"style\",\"paraId\":39,\"tocIndex\":7},{\"value\":\" 属性设置为一个函数，这样你可以根据数据对象动态设置元素的样式。\",\"paraId\":39,\"tocIndex\":7},{\"value\":\"圆形节点(\",\"paraId\":40,\"tocIndex\":7},{\"value\":\"circle\",\"paraId\":40,\"tocIndex\":7},{\"value\":\")是 G6 的默认节点类型，这里我们将第一个节点的类型设置为圆形，第二个节点的类型设置为矩形。\",\"paraId\":40,\"tocIndex\":7},{\"value\":\"同时我们还将节点的大小设置为 20，因此第一个节点是一个半径为 10 的圆形，第二个节点是一个边长为 20 的正方形。\",\"paraId\":41,\"tocIndex\":7},{\"value\":\"如果你想将矩形节点的大小设置为 20x10，可以将 \",\"paraId\":42,\"tocIndex\":7},{\"value\":\"size\",\"paraId\":42,\"tocIndex\":7},{\"value\":\" 设置为一个数组 \",\"paraId\":42,\"tocIndex\":7},{\"value\":\"[20, 10]\",\"paraId\":42,\"tocIndex\":7},{\"value\":\"。\",\"paraId\":42,\"tocIndex\":7},{\"value\":\"你可以在下面的示例中看到效果：\",\"paraId\":43,\"tocIndex\":7},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: [\\n        { id: 'node-1', style: { x: 50, y: 50 } },\\n        { id: 'node-2', style: { x: 150, y: 50 } },\\n      ],\\n      edges: [{ source: 'node-1', target: 'node-2' }],\\n    },\\n    node: {\\n      type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\\n      style: {\\n        fill: 'pink',\\n        size: 20,\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n  },\\n  { width: 200, height: 100 },\\n);\\n\",\"paraId\":44,\"tocIndex\":7},{\"value\":\"在上面的例子中提供的图表是静态的，接下来我们将添加一些交互行为。\",\"paraId\":45,\"tocIndex\":8},{\"value\":\"G6 提供了多种交互行为，我们添加几个常用的交互，使得用户可以拖拽、缩放画布，拖拽节点。\",\"paraId\":46,\"tocIndex\":8},{\"value\":\"{\\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'];\\n}\\n\",\"paraId\":47,\"tocIndex\":8},{\"value\":\"尝试在下面的示例中拖拽节点和画布，并使用滚轮缩放画布：\",\"paraId\":48,\"tocIndex\":8},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: [\\n        { id: 'node-1', style: { x: 50, y: 50 } },\\n        { id: 'node-2', style: { x: 150, y: 50 } },\\n      ],\\n      edges: [{ source: 'node-1', target: 'node-2' }],\\n    },\\n    node: {\\n      type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\\n      style: {\\n        fill: 'pink',\\n        size: 20,\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n  },\\n  { width: 300, height: 200 },\\n);\\n\",\"paraId\":49,\"tocIndex\":8},{\"value\":\"在上面的示例中，我们手动设置了节点的位置。但当节点数量较多时，这会变得非常困难。\",\"paraId\":50,\"tocIndex\":9},{\"value\":\"布局算法可以基于一定的规则自动调整节点的位置，G6 提供了多种布局算法，例如树形布局、力导向布局等。\",\"paraId\":51,\"tocIndex\":9},{\"value\":\"首先生成一组不包括位置信息的数据：\",\"paraId\":52,\"tocIndex\":9},{\"value\":\"const data = {\\n  nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n};\\n\",\"paraId\":53,\"tocIndex\":9},{\"value\":\"默认情况下，如果节点没有位置信息，G6 会将节点放置在左上角，即 \",\"paraId\":54,\"tocIndex\":9},{\"value\":\"(0, 0)\",\"paraId\":54,\"tocIndex\":9},{\"value\":\"。\",\"paraId\":54,\"tocIndex\":9},{\"value\":\"接下来我们使用 \",\"paraId\":55,\"tocIndex\":9},{\"value\":\"d3-force\",\"paraId\":55,\"tocIndex\":9},{\"value\":\" 布局算法，它是一种力导向布局算法，可以模拟节点之间的引力和斥力，使得节点自动调整到合适的位置。\",\"paraId\":55,\"tocIndex\":9},{\"value\":\"{\\n  layout: {\\n    type: 'd3-force',\\n  },\\n}\\n\",\"paraId\":56,\"tocIndex\":9},{\"value\":\"查看下面的示例，可以看到节点已经自动调整到合适的位置：\",\"paraId\":57,\"tocIndex\":9},{\"value\":\"完整代码\",\"paraId\":58},{\"value\":\"import { Graph } from '@antv/g6';\\n\\nconst graph = new Graph({\\n  container: 'container',\\n  data: {\\n    nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n  },\\n  node: {\\n    style: {\\n      size: 20,\\n      fill: 'pink',\\n    },\\n  },\\n  edge: {\\n    style: {\\n      stroke: 'lightgreen',\\n    },\\n  },\\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n  layout: {\\n    type: 'd3-force',\\n  },\\n});\\n\\ngraph.render();\\n\",\"paraId\":59,\"tocIndex\":9},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\\n      edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n    },\\n    node: {\\n      style: {\\n        size: 20,\\n        fill: 'pink',\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n    layout: {\\n      type: 'd3-force',\\n    },\\n  },\\n  { width: 200, height: 200 },\\n);\\n\",\"paraId\":60,\"tocIndex\":9},{\"value\":\"同样的，当节点数量较多时，手动设置节点的颜色也会变得困难。G6 提供了色板机制，可以便捷地为元素设置颜色。\",\"paraId\":61,\"tocIndex\":10},{\"value\":\"色板通常会基于数据的某个字段为元素设置颜色，例如节点的类型、边的权重等。\",\"paraId\":62,\"tocIndex\":10},{\"value\":\"下面我们在数据中的添加 \",\"paraId\":63,\"tocIndex\":10},{\"value\":\"category\",\"paraId\":63,\"tocIndex\":10},{\"value\":\" 字段：\",\"paraId\":63,\"tocIndex\":10},{\"value\":\"const data = {\\n  nodes: Array.from({ length: 10 }).map((_, i) => ({\\n    id: `node-${i}`,\\n    data: { category: i === 0 ? 'central' : 'around' },\\n  })),\\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n};\\n\",\"paraId\":64,\"tocIndex\":10},{\"value\":\"然后使用 \",\"paraId\":65,\"tocIndex\":10},{\"value\":\"tableau\",\"paraId\":65,\"tocIndex\":10},{\"value\":\" 色板为节点设置颜色，\",\"paraId\":65,\"tocIndex\":10},{\"value\":\"field\",\"paraId\":65,\"tocIndex\":10},{\"value\":\" 属性指定了数据中的字段，\",\"paraId\":65,\"tocIndex\":10},{\"value\":\"color\",\"paraId\":65,\"tocIndex\":10},{\"value\":\" 属性指定了色板的名称。\",\"paraId\":65,\"tocIndex\":10},{\"value\":\"{\\n  node: {\\n    palette: {\\n      field: 'category',\\n      color: 'tableau',\\n    }\\n  }\\n}\\n\",\"paraId\":66,\"tocIndex\":10},{\"value\":\"需要注意将 \",\"paraId\":67,\"tocIndex\":10},{\"value\":\"node.style\",\"paraId\":67,\"tocIndex\":10},{\"value\":\" 中的 \",\"paraId\":67,\"tocIndex\":10},{\"value\":\"fill\",\"paraId\":67,\"tocIndex\":10},{\"value\":\" 样式移除，因为其优先级高于色板分配的颜色。\",\"paraId\":67,\"tocIndex\":10},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: Array.from({ length: 10 }).map((_, i) => ({\\n        id: `node-${i}`,\\n        data: { category: i === 0 ? 'central' : 'around' },\\n      })),\\n      edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n    },\\n    node: {\\n      style: {\\n        size: 20,\\n      },\\n      palette: {\\n        field: 'category',\\n        color: 'tableau',\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n    layout: {\\n      type: 'd3-force',\\n    },\\n  },\\n  { width: 200, height: 200 },\\n);\\n\",\"paraId\":68,\"tocIndex\":10},{\"value\":\"插件机制是 G6 的一个重要特性，可以通过插件扩展 G6 的功能。G6 提供了丰富的内置插件，例如 \",\"paraId\":69,\"tocIndex\":11},{\"value\":\"tooltip\",\"paraId\":69,\"tocIndex\":11},{\"value\":\"、\",\"paraId\":69,\"tocIndex\":11},{\"value\":\"legend\",\"paraId\":69,\"tocIndex\":11},{\"value\":\" 等，也支持用户自定义插件。\",\"paraId\":69,\"tocIndex\":11},{\"value\":\"下面我们将使用 \",\"paraId\":70,\"tocIndex\":11},{\"value\":\"grid-line\",\"paraId\":70,\"tocIndex\":11},{\"value\":\" 插件为画布添加网格线：\",\"paraId\":70,\"tocIndex\":11},{\"value\":\"{\\n  plugins: ['grid-line'],\\n}\\n\",\"paraId\":71,\"tocIndex\":11},{\"value\":\"可以看到画布已经添加了网格线：\",\"paraId\":72,\"tocIndex\":11},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: Array.from({ length: 10 }).map((_, i) => ({\\n        id: `node-${i}`,\\n        data: { category: i === 0 ? 'central' : 'around' },\\n      })),\\n      edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n    },\\n    node: {\\n      style: {\\n        size: 20,\\n      },\\n      palette: {\\n        field: 'category',\\n        color: 'tableau',\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n    layout: {\\n      type: 'd3-force',\\n    },\\n    plugins: ['grid-line'],\\n  },\\n  { width: 200, height: 200 },\\n);\\n\",\"paraId\":73,\"tocIndex\":11},{\"value\":\"上面的插件配置项中使用了简写形式，大部分的插件都支持传递额外的参数，例如 \",\"paraId\":74,\"tocIndex\":11},{\"value\":\"grid-line\",\"paraId\":74,\"tocIndex\":11},{\"value\":\" 插件可以配置 \",\"paraId\":74,\"tocIndex\":11},{\"value\":\"follow\",\"paraId\":74,\"tocIndex\":11},{\"value\":\" 属性来指定拖拽画布时网格线是否跟随画布移动。\",\"paraId\":74,\"tocIndex\":11},{\"value\":\"{\\n  plugins: [{ type: 'grid-line', follow: true }];\\n}\\n\",\"paraId\":75,\"tocIndex\":11},{\"value\":\"尝试在下面的示例中拖拽画布，可以看到网格线跟随画布移动：\",\"paraId\":76,\"tocIndex\":11},{\"value\":\"createGraph(\\n  {\\n    data: {\\n      nodes: Array.from({ length: 10 }).map((_, i) => ({\\n        id: `node-${i}`,\\n        data: { category: i === 0 ? 'central' : 'around' },\\n      })),\\n      edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\\n    },\\n    node: {\\n      style: {\\n        size: 20,\\n      },\\n      palette: {\\n        field: 'category',\\n        color: 'tableau',\\n      },\\n    },\\n    edge: {\\n      style: {\\n        stroke: 'lightgreen',\\n      },\\n    },\\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\\n    layout: {\\n      type: 'd3-force',\\n    },\\n    plugins: [{ type: 'grid-line', follow: true }],\\n  },\\n  { width: 200, height: 200 },\\n);\\n\",\"paraId\":77,\"tocIndex\":11},{\"value\":\"在本教程中，我们从头开始创建了一个 G6 图表，并了解了 G6 的主要概念。我们学习了如何创建一个简单的图表，如何配置元素的样式和种类，如何添加交互行为，如何使用布局算法，如何使用色板，如何使用插件。\",\"paraId\":78,\"tocIndex\":12},{\"value\":\"关于 G6 更加详细的概念介绍可以在 \",\"paraId\":79,\"tocIndex\":12},{\"value\":\"核心概念\",\"paraId\":80,\"tocIndex\":12},{\"value\":\" 中查看。\",\"paraId\":79,\"tocIndex\":12},{\"value\":\"元素、布局、插件等配置项的详细说明可以在 \",\"paraId\":81,\"tocIndex\":12},{\"value\":\"API\",\"paraId\":82,\"tocIndex\":12},{\"value\":\" 中查看。\",\"paraId\":81,\"tocIndex\":12}];\n  "],"names":[],"mappings":"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"}