(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["eb430df1"],{eb430df1:function(e,n,t){"use strict";t.d(n,"__esModule",{value:!0}),t.d(n,"texts",{enumerable:!0,get:function(){return a;}}),t("e5cb2c05");let a=[{value:"Custom plugins can implement additional functionalities, such as adding extra components, rendering logic, etc.",paraId:0,tocIndex:0},{value:"Similar to interactions, the implementation of plugins is also quite flexible, and you can implement your plugins in the style you prefer.",paraId:1,tocIndex:1},{value:"Below is an example of a simple custom plugin that automatically loads remote data during the graph instantiation process:",paraId:2,tocIndex:1},{value:"import { BasePlugin } from '@antv/g6';\nimport type { BasePluginOptions, RuntimeContext } from '@antv/g6';\n\ninterface RemoteDataSourceOptions extends BasePluginOptions {}\n\nclass RemoteDataSource extends BasePlugin<RemoteDataSourceOptions> {\n  constructor(context: RuntimeContext, options: RemoteDataSourceOptions) {\n    super(context, options);\n    this.loadData();\n  }\n\n  private async loadData() {\n    // mock remote data\n    const data = {\n      nodes: [\n        { id: 'node-1', x: 100, y: 100 },\n        { id: 'node-2', x: 200, y: 200 },\n      ],\n      edges: [{ source: 'node-1', target: 'node-2' }],\n    };\n\n    const { graph } = this.context;\n    graph.setData(data);\n    await graph.render();\n  }\n}\n",paraId:3,tocIndex:1},{value:"In the example above, we have simulated the implementation of a data loading plugin. After using this plugin, there is no need to pass in data when instantiating the Graph; the plugin will automatically load remote data.",paraId:4,tocIndex:1},{value:"(() => {\n  const { BasePlugin, Graph, register, ExtensionCategory } = window.g6;\n\n  class RemoteDataSource extends BasePlugin {\n    constructor(context, options) {\n      super(context, options);\n      this.loadData();\n    }\n\n    async loadData() {\n      // mock remote data\n      const data = {\n        nodes: [\n          { id: 'node-1', style: { x: 25, y: 50 } },\n          { id: 'node-2', style: { x: 175, y: 50 } },\n        ],\n        edges: [{ source: 'node-1', target: 'node-2' }],\n      };\n\n      const { graph } = this.context;\n      graph.setData(data);\n      await graph.render();\n    }\n  }\n\n  register(ExtensionCategory.PLUGIN, 'remote-data-source', RemoteDataSource);\n\n  const container = window.createContainer({ width: 200, height: 100 });\n\n  const graph = new Graph({\n    container,\n    width: 200,\n    height: 100,\n    plugins: ['remote-data-source'],\n  });\n\n  graph.render();\n\n  return container;\n})();\n",paraId:5,tocIndex:1},{value:"You can register plugins using the ",paraId:6,tocIndex:2},{value:"register",paraId:6,tocIndex:2},{value:" method provided by G6. For more details, please refer to ",paraId:6,tocIndex:2},{value:"Register Plugin",paraId:7,tocIndex:2},{value:"You can pass the name of the interaction type or a configuration parameters object in the ",paraId:8,tocIndex:3},{value:"plugins",paraId:8,tocIndex:3},{value:" field. For more details, please refer to ",paraId:8,tocIndex:3},{value:"Configure Plugins",paraId:9,tocIndex:3}];}}]);
//# sourceMappingURL=eb430df1-async.5e43caa5.js.map