(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["77013ffe"],{"77013ffe":function(e,a,d){"use strict";d.d(a,"__esModule",{value:!0}),d.d(a,"texts",{enumerable:!0,get:function(){return t;}}),d("34f332fc");let t=[{value:"Nodes of the same depth will be placed on the same layer. Unlike compactBox, the layout does not take into account the size of the nodes.",paraId:0},{value:"'H' | 'V'",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"Default:",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"'H'",paraId:1,tocIndex:1},{value:"The direction of the tree layout",paraId:2,tocIndex:1},{value:"'H'",paraId:3,tocIndex:1},{value:": Horizontal - The child nodes of the root node are divided into two parts and placed horizontally to the left and right sides of the root node",paraId:3,tocIndex:1},{value:"'V'",paraId:4,tocIndex:1},{value:": Vertical - Arrange all child nodes of the root node vertically",paraId:4,tocIndex:1},{value:"(d?:_ ",paraId:5,tocIndex:2},{value:"Node",paraId:5,tocIndex:2},{value:") => number",paraId:5,tocIndex:2},{value:"The width of each node",paraId:6,tocIndex:2},{value:"Example:",paraId:7,tocIndex:2},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:8,tocIndex:2},{value:"(d?:_ ",paraId:9,tocIndex:3},{value:"Node",paraId:9,tocIndex:3},{value:") => number",paraId:9,tocIndex:3},{value:"The height of each node",paraId:10,tocIndex:3},{value:"Example:",paraId:11,tocIndex:3},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:12,tocIndex:3},{value:"(d?:_ ",paraId:13,tocIndex:4},{value:"Node",paraId:13,tocIndex:4},{value:") => number",paraId:13,tocIndex:4},{value:"The horizontal gap between each node",paraId:14,tocIndex:4},{value:"Example:",paraId:15,tocIndex:4},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:16,tocIndex:4},{value:"(d?:_ ",paraId:17,tocIndex:5},{value:"Node",paraId:17,tocIndex:5},{value:") => number",paraId:17,tocIndex:5},{value:"The vertical gap between each node",paraId:18,tocIndex:5},{value:"Example:",paraId:19,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:20,tocIndex:5},{value:"(d?:_ ",paraId:21,tocIndex:6},{value:"Node",paraId:21,tocIndex:6},{value:") => string",paraId:21,tocIndex:6},{value:"Node placement is to the left or right of the root node. If this value is set, all nodes will be on the same side of the root node, which means that ",paraId:22,tocIndex:6},{value:"direction = 'H'",paraId:22,tocIndex:6},{value:" will no longer be effective. If this parameter is a callback function, it can specify the left or right side of the root node for each individual node.",paraId:22,tocIndex:6},{value:"Example:",paraId:23,tocIndex:6},{value:"(d) => {\n  // d is a node\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:24,tocIndex:6}];}}]);
//# sourceMappingURL=77013ffe-async.20d36a3a.js.map