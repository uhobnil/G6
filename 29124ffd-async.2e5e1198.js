(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["29124ffd"],{"29124ffd":function(e,n,a){"use strict";a.d(n,"__esModule",{value:!0}),a.d(n,"texts",{enumerable:!0,get:function(){return t;}}),a("946d91cf");let t=[{value:" The legend plugin is used to display the classification information of elements in the graph, and supports the display of classification information of nodes, edges, and combos.",paraId:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node-1',\n          type: 'circle',\n          data: { cluster: 'node-type1' },\n        },\n        {\n          id: 'node-2',\n          type: 'rect',\n          data: { cluster: 'node-type2' },\n        },\n        {\n          id: 'node-3',\n          type: 'triangle',\n          data: { cluster: 'node-type3' },\n        },\n        {\n          id: 'node-4',\n          type: 'diamond',\n          data: { cluster: 'node-type4' },\n        },\n      ],\n      edges: [\n        {\n          source: 'node-1',\n          target: 'node-2',\n          data: { cluster: 'edge-type1' },\n        },\n        {\n          source: 'node-1',\n          target: 'node-4',\n          data: { cluster: 'edge-type2' },\n        },\n        {\n          source: 'node-3',\n          target: 'node-4',\n        },\n        {\n          source: 'node-2',\n          target: 'node-4',\n          data: { cluster: 'edge-type3' },\n        },\n      ],\n    },\n    layout: { type: 'grid', cols: 2 },\n    node: {\n      style: { size: 24 },\n      palette: {\n        field: 'cluster',\n      },\n    },\n    behaviors: ['drag-canvas'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'legend',\n        key: 'legend',\n        nodeField: 'cluster',\n        edgeField: 'cluster',\n        itemLabelFontSize: 12,\n      },\n    ],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'legend',\n      trigger: 'hover',\n      position: 'bottom',\n      itemSpacing: 4,\n      rowPadding: 10,\n      colPadding: 10,\n      itemMarkerSize: 16,\n      itemLabelFontSize: 12,\n    };\n    const optionFolder = gui.addFolder('Legend Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'trigger', ['hover', 'click']);\n    optionFolder.add(options, 'position', ['left', 'right', 'top', 'bottom']);\n    optionFolder.add(options, 'itemSpacing', 0, 20, 1);\n    optionFolder.add(options, 'colPadding', 0, 20, 1);\n    optionFolder.add(options, 'rowPadding', 0, 20, 1);\n    optionFolder.add(options, 'itemMarkerSize', 12, 20, 1);\n    optionFolder.add(options, 'itemLabelFontSize', 12, 20, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'legend',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:1},{value:"string",paraId:2,tocIndex:1},{value:"Plugin key, that is, the unique identifier",paraId:3,tocIndex:1},{value:" Used to identify the plugin for further operations",paraId:4,tocIndex:1},{value:"// Get plugin instance\r\nconst plugin = graph.getPluginInstance('key');\r\n// Update plugin options\r\ngraph.updatePlugin({key: 'key', ...});\n",paraId:5,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"string",paraId:7,tocIndex:2},{value:"Plugin type",paraId:8,tocIndex:2},{value:"string | ((item:",paraId:9,tocIndex:3},{value:" ",paraId:9,tocIndex:3},{value:"NodeData | EdgeData | ComboData",paraId:9,tocIndex:3},{value:") => string)",paraId:9,tocIndex:3},{value:"Combo Classification Identifier",paraId:10,tocIndex:3},{value:"string | ((item:",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"NodeData | EdgeData | ComboData",paraId:11,tocIndex:4},{value:") => string)",paraId:11,tocIndex:4},{value:"Edge Classification Identifier",paraId:12,tocIndex:4},{value:"string | ((item:",paraId:13,tocIndex:5},{value:" ",paraId:13,tocIndex:5},{value:"NodeData | EdgeData | ComboData",paraId:13,tocIndex:5},{value:") => string)",paraId:13,tocIndex:5},{value:"Node Classification Identifier",paraId:14,tocIndex:5},{value:"'left' | 'right' | 'top' | 'bottom'",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"Default:",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"'bottom'",paraId:15,tocIndex:6},{value:"Relative position of the legend in the canvas, defaults to 'bottom', representing the bottom of the canvas",paraId:16,tocIndex:6},{value:"'hover' | 'click'",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"Default:",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"'hover'",paraId:17,tocIndex:7},{value:"Legend trigger behavior",paraId:18,tocIndex:7},{value:"'hover'",paraId:19,tocIndex:7},{value:"\uFF1Amouseover the legend item",paraId:19,tocIndex:7},{value:"'click'",paraId:20,tocIndex:7},{value:"\uFF1Aclick the legend item",paraId:20,tocIndex:7},{value:" Refresh the status of the legend element",paraId:21,tocIndex:9},{value:"updateElement(): void;\n",paraId:22,tocIndex:9}];}}]);
//# sourceMappingURL=29124ffd-async.2e5e1198.js.map