{"version":3,"sources":["docs/manual/core-concept/state.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/core-concept/state.zh.md?watch=parent';\n  export const texts = [{\"value\":\"状态(State)是指\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"元素\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"存在的状态，例如\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"选中\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"、\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"悬停\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"、\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"激活\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"等。状态可以使得元素在不同的状态下展示不同的样式，帮助用户更直观的理解图中的信息。\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"G6 中的状态类型是一个字符串数组(\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"string[]\",\"paraId\":1,\"tocIndex\":1},{\"value\":\")，即一个元素可以同时存在多个状态，例如一个节点可以同时处于\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"选中\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"和\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"悬停\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"状态。\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"G6 预设的状态包括：\",\"paraId\":2,\"tocIndex\":1},{\"value\":\"selected\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"：选中状态\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"active\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"：激活状态\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"highlight\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"：高亮状态\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"inactive\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"：非激活状态\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"disable\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"：禁用状态\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"默认状态\",\"paraId\":4},{\"value\":\"是元素的初始状态，当元素没有任何状态时，它就处于默认状态。\",\"paraId\":4},{\"value\":\"预设的状态并不是强制性的，仅仅是一些常见的状态类型，用户可以根据自己的需求定义更多的状态类型。\",\"paraId\":4},{\"value\":\"目前 G6 支持在样式映射中配置状态样式，例如：\",\"paraId\":5,\"tocIndex\":3},{\"value\":\"{\\n  node: {\\n    style: {/** 默认状态样式 */},\\n    state: {\\n      selected: {/** 选中状态样式 */},\\n      [状态名]: {/** 状态样式 */}\\n    }\\n  },\\n  edge: {\\n   style: {/** 默认状态样式 */},\\n   state: {\\n      selected: {/** 选中状态样式 */},\\n      [状态名]: {/** 状态样式 */}\\n    }\\n  },\\n  combo: {\\n    style: {/** 默认状态样式 */},\\n    state: {\\n      selected: {/** 选中状态样式 */},\\n      [状态名]: {/** 状态样式 */}\\n    }\\n  }\\n}\\n\",\"paraId\":6,\"tocIndex\":3},{\"value\":\"在绘制之前，可以在数据中配置元素的状态：\",\"paraId\":7,\"tocIndex\":4},{\"value\":\"const data = {\\n  nodes: [\\n    {\\n      id: 'node-1',\\n      states: ['selected'],\\n    },\\n    {\\n      id: 'node-2',\\n      states: ['disabled'],\\n    },\\n  ],\\n  edges: [\\n    {\\n      source: 'node-1',\\n      target: 'node-2',\\n      states: ['highlight'],\\n    },\\n  ],\\n};\\n\",\"paraId\":8,\"tocIndex\":4},{\"value\":\"或者在完成绘制后通过 API 来切换元素的状态：\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"// 将节点 'node-1' 设置为选中状态\\ngraph.setElementState('node-1', 'selected');\\n\\n// 将节点 'node-2' 设置为选中且禁用状态\\ngraph.setElementState('node-2', ['selected', 'disabled']);\\n\\n// 同时设置 'node-1' 和 'node-2' 为高亮状态\\ngraph.setElementState({\\n  'node-1': ['highlight'],\\n  'node-2': ['highlight'],\\n});\\n\",\"paraId\":10,\"tocIndex\":4},{\"value\":\"G6 提供了多个 API 用于获取状态，或者判断元素是否处于某个状态：\",\"paraId\":11,\"tocIndex\":5},{\"value\":\"// 获取 'node-1' 的所有状态\\ngraph.getElementState('node-1');\\n\",\"paraId\":12,\"tocIndex\":5},{\"value\":\"当元素仅存在 \",\"paraId\":13,\"tocIndex\":5},{\"value\":\"默认状态\",\"paraId\":13,\"tocIndex\":5},{\"value\":\" 时，\",\"paraId\":13,\"tocIndex\":5},{\"value\":\"getElementState\",\"paraId\":13,\"tocIndex\":5},{\"value\":\" 返回值为 \",\"paraId\":13,\"tocIndex\":5},{\"value\":\"[]\",\"paraId\":13,\"tocIndex\":5},{\"value\":\"。\",\"paraId\":13,\"tocIndex\":5},{\"value\":\"// 获取所有选中的节点\\ngraph.getElementDataByState('node', 'selected');\\n\",\"paraId\":14,\"tocIndex\":5},{\"value\":\"要移除元素的状态，同样使用 \",\"paraId\":15,\"tocIndex\":6},{\"value\":\"setElementState\",\"paraId\":15,\"tocIndex\":6},{\"value\":\" 方法即可实现：\",\"paraId\":15,\"tocIndex\":6},{\"value\":\"// 移除 `node-1` 的所有状态（恢复至默认状态）\\ngraph.setElementState('node-1', []);\\n\",\"paraId\":16,\"tocIndex\":6},{\"value\":\"当一个元素处于多个状态时，会根据状态值中的顺序来确定状态的优先级，例如一个节点的状态值为：\",\"paraId\":17,\"tocIndex\":7},{\"value\":\"['selected', 'highlight']\",\"paraId\":17,\"tocIndex\":7},{\"value\":\"，则最终的状态样式为：\",\"paraId\":17,\"tocIndex\":7},{\"value\":\"最终样式 = 默认状态样式 + 选中状态样式 + 高亮状态样式\",\"paraId\":18,\"tocIndex\":7},{\"value\":\"后者的状态样式会覆盖前者的状态样式。\",\"paraId\":19,\"tocIndex\":7},{\"value\":\"要自定义状态，直接在样式映射中添加即可，例如：\",\"paraId\":20,\"tocIndex\":8},{\"value\":\"{\\n  node: {\\n    // 自定义状态名为：'custom-state'\\n    state: {\\n      'custom-state': {/** 自定义状态样式 */}\\n    }\\n  },\\n}\\n\",\"paraId\":21,\"tocIndex\":8},{\"value\":\"切换状态：\",\"paraId\":22,\"tocIndex\":8},{\"value\":\"graph.setElementState('node-1', 'custom-state');\\n\",\"paraId\":23,\"tocIndex\":8}];\n  "],"names":[],"mappings":"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"}