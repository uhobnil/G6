{"version":3,"sources":["docs/api/layouts/ConcentricLayout.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/api/layouts/ConcentricLayout.zh.md?watch=parent';\n  export const texts = [{\"value\":\"PointTuple\",\"paraId\":0,\"tocIndex\":1},{\"value\":\"圆形布局的中心位置,默认为当前容器的中心位置\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"boolean\",\"paraId\":2,\"tocIndex\":2},{\"value\":\" \",\"paraId\":2,\"tocIndex\":2},{\"value\":\"Default:\",\"paraId\":2,\"tocIndex\":2},{\"value\":\" \",\"paraId\":2,\"tocIndex\":2},{\"value\":\"false\",\"paraId\":2,\"tocIndex\":2},{\"value\":\"是否按照顺时针排列\",\"paraId\":3,\"tocIndex\":2},{\"value\":\"boolean\",\"paraId\":4,\"tocIndex\":3},{\"value\":\" \",\"paraId\":4,\"tocIndex\":3},{\"value\":\"Default:\",\"paraId\":4,\"tocIndex\":3},{\"value\":\" \",\"paraId\":4,\"tocIndex\":3},{\"value\":\"false\",\"paraId\":4,\"tocIndex\":3},{\"value\":\"环与环之间的距离是否相等\",\"paraId\":5,\"tocIndex\":3},{\"value\":\"number\",\"paraId\":6,\"tocIndex\":4},{\"value\":\"布局的高度，默认使用容器高度\",\"paraId\":7,\"tocIndex\":4},{\"value\":\"number\",\"paraId\":8,\"tocIndex\":5},{\"value\":\" \",\"paraId\":8,\"tocIndex\":5},{\"value\":\"Default:\",\"paraId\":8,\"tocIndex\":5},{\"value\":\" \",\"paraId\":8,\"tocIndex\":5},{\"value\":\"undefined\",\"paraId\":8,\"tocIndex\":5},{\"value\":\"每一层同心值的求和\",\"paraId\":9,\"tocIndex\":5},{\"value\":\" 若为 undefined，则将会被设置为 maxValue / 4 ，其中 maxValue 为最大的排序依据的属性值。例如，若 sortBy 为 'degree'，则 maxValue 为所有节点中度数最大的节点的度数\",\"paraId\":10,\"tocIndex\":5},{\"value\":\"number |\",\"paraId\":11,\"tocIndex\":6},{\"value\":\" \",\"paraId\":11,\"tocIndex\":6},{\"value\":\"PointTuple\",\"paraId\":11,\"tocIndex\":6},{\"value\":\" \",\"paraId\":11,\"tocIndex\":6},{\"value\":\"| ((nodeData:\",\"paraId\":11,\"tocIndex\":6},{\"value\":\" \",\"paraId\":11,\"tocIndex\":6},{\"value\":\"Node\",\"paraId\":11,\"tocIndex\":6},{\"value\":\") => number)\",\"paraId\":11,\"tocIndex\":6},{\"value\":\"节点大小（直径）。用于防止节点重叠时的碰撞检测\",\"paraId\":12,\"tocIndex\":6},{\"value\":\"number | number[] | ((node?:\",\"paraId\":13,\"tocIndex\":7},{\"value\":\" \",\"paraId\":13,\"tocIndex\":7},{\"value\":\"Node\",\"paraId\":13,\"tocIndex\":7},{\"value\":\") => number)\",\"paraId\":13,\"tocIndex\":7},{\"value\":\" \",\"paraId\":13,\"tocIndex\":7},{\"value\":\"Default:\",\"paraId\":13,\"tocIndex\":7},{\"value\":\" \",\"paraId\":13,\"tocIndex\":7},{\"value\":\"10\",\"paraId\":13,\"tocIndex\":7},{\"value\":\"环与环之间最小间距，用于调整半径\",\"paraId\":14,\"tocIndex\":7},{\"value\":\"boolean\",\"paraId\":15,\"tocIndex\":8},{\"value\":\" \",\"paraId\":15,\"tocIndex\":8},{\"value\":\"Default:\",\"paraId\":15,\"tocIndex\":8},{\"value\":\" \",\"paraId\":15,\"tocIndex\":8},{\"value\":\"false\",\"paraId\":15,\"tocIndex\":8},{\"value\":\"是否防止重叠\",\"paraId\":16,\"tocIndex\":8},{\"value\":\" 必须配合下面属性 nodeSize 或节点数据中的 data.size 属性，只有在数据中设置了 data.size 或在该布局中配置了与当前图节点大小相同的 nodeSize 值，才能够进行节点重叠的碰撞检测\",\"paraId\":17,\"tocIndex\":8},{\"value\":\"string\",\"paraId\":18,\"tocIndex\":9},{\"value\":\" \",\"paraId\":18,\"tocIndex\":9},{\"value\":\"Default:\",\"paraId\":18,\"tocIndex\":9},{\"value\":\" \",\"paraId\":18,\"tocIndex\":9},{\"value\":\"undefined\",\"paraId\":18,\"tocIndex\":9},{\"value\":\"指定排序的依据（节点属性名）\",\"paraId\":19,\"tocIndex\":9},{\"value\":\" 数值越高则该节点被放置得越中心。若为 undefined，则会计算节点的度数，度数越高，节点将被放置得越中心\",\"paraId\":20,\"tocIndex\":9},{\"value\":\"number\",\"paraId\":21,\"tocIndex\":10},{\"value\":\" \",\"paraId\":21,\"tocIndex\":10},{\"value\":\"Default:\",\"paraId\":21,\"tocIndex\":10},{\"value\":\" \",\"paraId\":21,\"tocIndex\":10},{\"value\":\"3 / 2 * Math.PI\",\"paraId\":21,\"tocIndex\":10},{\"value\":\"开始布局节点的弧度\",\"paraId\":22,\"tocIndex\":10},{\"value\":\"number\",\"paraId\":23,\"tocIndex\":11},{\"value\":\" \",\"paraId\":23,\"tocIndex\":11},{\"value\":\"Default:\",\"paraId\":23,\"tocIndex\":11},{\"value\":\" \",\"paraId\":23,\"tocIndex\":11},{\"value\":\"undefined\",\"paraId\":23,\"tocIndex\":11},{\"value\":\"第一个节点与最后一个节点之间的弧度差\",\"paraId\":24,\"tocIndex\":11},{\"value\":\" 若为 undefined ，则将会被设置为 2 * Math.PI * (1 - 1 / |level.nodes|) ，其中 level.nodes 为该算法计算出的每一层的节点，|level.nodes| 代表该层节点数量\",\"paraId\":25,\"tocIndex\":11},{\"value\":\"number\",\"paraId\":26,\"tocIndex\":12},{\"value\":\"布局的宽度，默认使用容器宽度\",\"paraId\":27,\"tocIndex\":12},{\"value\":\"To directly assign the positions to the nodes.\",\"paraId\":28,\"tocIndex\":14},{\"value\":\"assign(graph: Graph, options?: ConcentricLayoutOptions): Promise<void>;\\n\",\"paraId\":29,\"tocIndex\":14},{\"value\":\"相关参数\",\"paraId\":30},{\"value\":\"参数\",\"paraId\":31,\"tocIndex\":14},{\"value\":\"类型\",\"paraId\":32,\"tocIndex\":14},{\"value\":\"描述\",\"paraId\":33,\"tocIndex\":14},{\"value\":\"graph\",\"paraId\":34,\"tocIndex\":14},{\"value\":\"Graph\",\"paraId\":35,\"tocIndex\":14},{\"value\":\"options\",\"paraId\":36,\"tocIndex\":14},{\"value\":\"ConcentricLayoutOptions\",\"paraId\":37,\"tocIndex\":14},{\"value\":\"返回值\",\"paraId\":38,\"tocIndex\":14},{\"value\":\"：\",\"paraId\":38,\"tocIndex\":14},{\"value\":\"类型：\",\"paraId\":39,\"tocIndex\":14},{\"value\":\"Promise<void>\",\"paraId\":39,\"tocIndex\":14},{\"value\":\"Return the positions of nodes and edges(if needed).\",\"paraId\":40,\"tocIndex\":15},{\"value\":\"execute(graph: Graph, options?: ConcentricLayoutOptions): Promise<LayoutMapping>;\\n\",\"paraId\":41,\"tocIndex\":15},{\"value\":\"相关参数\",\"paraId\":30},{\"value\":\"参数\",\"paraId\":42,\"tocIndex\":15},{\"value\":\"类型\",\"paraId\":43,\"tocIndex\":15},{\"value\":\"描述\",\"paraId\":44,\"tocIndex\":15},{\"value\":\"graph\",\"paraId\":45,\"tocIndex\":15},{\"value\":\"Graph\",\"paraId\":46,\"tocIndex\":15},{\"value\":\"options\",\"paraId\":47,\"tocIndex\":15},{\"value\":\"ConcentricLayoutOptions\",\"paraId\":48,\"tocIndex\":15},{\"value\":\"返回值\",\"paraId\":49,\"tocIndex\":15},{\"value\":\"：\",\"paraId\":49,\"tocIndex\":15},{\"value\":\"类型：\",\"paraId\":50,\"tocIndex\":15},{\"value\":\"Promise<LayoutMapping>\",\"paraId\":50,\"tocIndex\":15}];\n  "],"names":[],"mappings":"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"}