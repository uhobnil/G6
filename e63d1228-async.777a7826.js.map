{"version":3,"sources":["docs/manual/custom-extension/palette.en.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/custom-extension/palette.en.md?watch=parent';\n  export const texts = [{\"value\":\"Core Concepts - Palette\",\"paraId\":0,\"tocIndex\":0},{\"value\":\" mentions that G6 supports discrete palettes and continuous palettes. A discrete palette is essentially an array of colors, while a continuous palette is a color interpolator.\",\"paraId\":1,\"tocIndex\":0},{\"value\":\"Therefore, customizing a palette also adopts these two methods, and the following sections will introduce how to customize discrete and continuous palettes, respectively.\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"You can simply define a string array that contains color values. Supported color values include: RGB color values, hexadecimal color values, and color names. Below is an example of a discrete palette:\",\"paraId\":3,\"tocIndex\":2},{\"value\":\"const hex = ['#FF0000', '#00FF00', '#0000FF'];\\n\\nconst color = ['red', 'green', 'blue'];\\n\\nconst rgb = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)'];\\n\",\"paraId\":4,\"tocIndex\":2},{\"value\":\"A continuous palette requires the definition of a color interpolator. The interpolator is a function that accepts a numerical value as a parameter and returns a color value. Below is an example of a continuous palette:\",\"paraId\":5,\"tocIndex\":3},{\"value\":\"const color = (value: number) => `rgb(${value * 255}, 0, 0)`;\\n\",\"paraId\":6,\"tocIndex\":3},{\"value\":\"You can register a palette using the \",\"paraId\":7,\"tocIndex\":4},{\"value\":\"register\",\"paraId\":7,\"tocIndex\":4},{\"value\":\" method provided by G6. For more details, please refer to \",\"paraId\":7,\"tocIndex\":4},{\"value\":\"Register Palette\",\"paraId\":8,\"tocIndex\":4},{\"value\":\"In addition to registration, you can also bypass the registration mechanism and directly pass the palette value at the location where the palette is needed, for example:\",\"paraId\":9,\"tocIndex\":5},{\"value\":\"{\\n  node: {\\n    palette: {\\n      type: 'group',\\n      field: 'category',\\n      color: ['#5B8FF9', '#61DDAA', '#F6BD16'], // Pass in a color array.\\n    }\\n  },\\n  edge: {\\n    palette: {\\n      type: 'value',\\n      field: 'value',\\n      color: (value) => `rgb(${value * 255}, 0, 0)`, // Pass in an interpolator\\n    }\\n  }\\n}\\n\",\"paraId\":10,\"tocIndex\":5}];\n  "],"names":[],"mappings":"6PAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,0BAA0B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kLAAkL,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,6KAA6K,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2MAA2M,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,qKAAqK,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,6NAA6N,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kEAAkE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wCAAwC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,WAAW,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,6DAA6D,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mBAAmB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4KAA4K,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,iVAAiV,OAAS,GAAG,SAAW,CAAC,EAAE"}