{"version":3,"sources":["docs/manual/custom-extension-common/layout/iterative-layout.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/custom-extension-common/layout/iterative-layout.md?watch=parent';\n  export const texts = [{\"value\":\"(async () => {\\n  const { Graph, BaseLayout, register, ExtensionCategory } = window.g6;\\n  class TickTockLayout extends BaseLayout {\\n    id = 'tick-tock-layout';\\n\\n    async execute(data, options) {\\n      const { onTick } = { ...this.options, ...options };\\n\\n      this.tickCount = 0;\\n      this.data = data;\\n\\n      this.promise = new Promise((resolve) => {\\n        this.resolve = resolve;\\n      });\\n\\n      this.timer = window.setInterval(() => {\\n        onTick(this.simulateTick());\\n        if (this.tickCount === 10) this.stop();\\n      }, 200);\\n\\n      await this.promise;\\n\\n      return this.simulateTick();\\n    }\\n\\n    simulateTick = () => {\\n      const x = this.tickCount++ % 2 === 0 ? 50 : 150;\\n\\n      return {\\n        nodes: (this?.data?.nodes || []).map((node, index) => ({\\n          id: node.id,\\n          style: { x, y: (index + 1) * 30 },\\n        })),\\n      };\\n    };\\n\\n    tick = () => {\\n      return this.simulateTick();\\n    };\\n\\n    stop = () => {\\n      clearInterval(this.timer);\\n      this.resolve?.();\\n    };\\n  }\\n\\n  register(ExtensionCategory.LAYOUT, 'tick-tock', TickTockLayout);\\n\\n  const container = createContainer({ width: 200, height: 200 });\\n\\n  const graph = new Graph({\\n    container,\\n    width: 200,\\n    height: 200,\\n    animation: true,\\n    data: {\\n      nodes: [{ id: 'node-1' }, { id: 'node-2' }, { id: 'node-3' }, { id: 'node-4' }, { id: 'node-5' }],\\n    },\\n    layout: {\\n      type: 'tick-tock',\\n    },\\n  });\\n\\n  graph.render();\\n\\n  return container;\\n})();\\n\",\"paraId\":0}];\n  "],"names":[],"mappings":"6PAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,0gDAA0gD,OAAS,CAAC,EAAE"}