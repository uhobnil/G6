{"version":3,"sources":["docs/manual/custom-extension/animation.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/custom-extension/animation.zh.md?watch=parent';\n  export const texts = [{\"value\":\"对于圆形节点（Circle）元素，其主图形是一个圆形，现在为其编写一个动画，当节点的尺寸发生变化时，能够以缩放的方式进行过渡动画：\",\"paraId\":0,\"tocIndex\":1},{\"value\":\"[\\n  {\\n    fields: ['r'],\\n    shape: 'key',\\n  },\\n];\\n\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"下面我们创建一个图实例并更新元素尺寸来触发更新动画：\",\"paraId\":2,\"tocIndex\":1},{\"value\":\"const graph = new Graph({\\n  container: 'container',\\n  width: 50,\\n  height: 50,\\n  data: {\\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\\n  },\\n  node: {\\n    animation: {\\n      update: [{ fields: ['r'], shape: 'key' }],\\n    },\\n  },\\n});\\n\\ngraph.draw().then(() => {\\n  graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\\n  graph.draw();\\n});\\n\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"(() => {\\n  const container = createContainer({ width: 50, height: 50 });\\n\\n  const graph = new window.g6.Graph({\\n    width: 50,\\n    height: 50,\\n    container,\\n    data: {\\n      nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\\n    },\\n    node: {\\n      animation: {\\n        update: [\\n          {\\n            fields: ['r'],\\n            shape: 'key',\\n          },\\n        ],\\n      },\\n    },\\n  });\\n\\n  graph.draw().then(() => {\\n    graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\\n    graph.draw();\\n  });\\n\\n  return container;\\n})();\\n\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"当对一个元素执行动画时，该元素会将其动画帧参数转化为其各个子图形上的动画帧参数，并执行对应的动画。\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"在上面的例子中，通过更新节点尺寸(size)，对该节点执行了动画，其动画帧参数为：\",\"paraId\":7,\"tocIndex\":2},{\"value\":\"[{ \\\"size\\\": 20 }, { \\\"size\\\": 40 }]\\n\",\"paraId\":8,\"tocIndex\":2},{\"value\":\"节点元素拿到该属性后，将其转化为主图形（圆形）的动画帧参数：\",\"paraId\":9,\"tocIndex\":2},{\"value\":\"[{ \\\"r\\\": 10 }, { \\\"r\\\": 20 }]\\n\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"因此这里最终是对圆形执行了半径从 10 到 20 的过渡动画。\",\"paraId\":11,\"tocIndex\":2},{\"value\":\"直接将位置变化动画和尺寸变化动画合并到一个动画范式即可得到复合动画范式：\",\"paraId\":12,\"tocIndex\":3},{\"value\":\"[\\n  {\\n    fields: ['x', 'y'],\\n  },\\n  {\\n    fields: ['r'],\\n    shape: 'key',\\n  },\\n];\\n\",\"paraId\":13,\"tocIndex\":3},{\"value\":\"并同时更新该节点的位置和尺寸：\",\"paraId\":14,\"tocIndex\":3},{\"value\":\"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\\ngraph.draw();\\n\",\"paraId\":15,\"tocIndex\":3},{\"value\":\"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放\",\"paraId\":16,\"tocIndex\":3},{\"value\":\"(() => {\\n  const container = createContainer({ width: 200, height: 50 });\\n\\n  const graph = new window.g6.Graph({\\n    width: 200,\\n    height: 50,\\n    container,\\n    data: {\\n      nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\\n    },\\n    node: {\\n      animation: {\\n        update: [\\n          {\\n            fields: ['x', 'y'],\\n          },\\n          { fields: ['r'], shape: 'key' },\\n        ],\\n      },\\n    },\\n  });\\n\\n  graph.draw().then(() => {\\n    graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\\n    graph.draw();\\n  });\\n\\n  return container;\\n})();\\n\",\"paraId\":17,\"tocIndex\":3},{\"value\":\"加入颜色过渡：\",\"paraId\":18,\"tocIndex\":3},{\"value\":\"[\\n  {\\n    fields: ['x', 'y'],\\n  },\\n  {\\n    fields: ['r', 'fill'],\\n    shape: 'key',\\n  },\\n];\\n\",\"paraId\":19,\"tocIndex\":3},{\"value\":\"执行节点更新：\",\"paraId\":20,\"tocIndex\":3},{\"value\":\"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\\ngraph.draw();\\n\",\"paraId\":21,\"tocIndex\":3},{\"value\":\"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"(() => {\\n  const container = createContainer({ width: 200, height: 50 });\\n\\n  const graph = new window.g6.Graph({\\n    width: 200,\\n    height: 50,\\n    container,\\n    data: {\\n      nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\\n    },\\n    node: {\\n      animation: {\\n        update: [\\n          {\\n            fields: ['x', 'y'],\\n          },\\n          { fields: ['r', 'fill'], shape: 'key' },\\n        ],\\n      },\\n    },\\n  });\\n\\n  graph.draw().then(() => {\\n    graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\\n    graph.draw();\\n  });\\n\\n  return container;\\n})();\\n\",\"paraId\":23,\"tocIndex\":3}];\n  "],"names":[],"mappings":"+PAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,2WAAoE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4DAA4D,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+JAA6B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,iYAAiY,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,sKAA+B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wkBAAwkB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,ySAAoD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2NAA4C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,qCAAyC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,uLAAiC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+BAAmC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qJAAkC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2NAAuC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gGAAgG,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6FAAkB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0FAA0F,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,sKAA+B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,wmBAAwmB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6CAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,wGAAwG,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6CAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,wGAAwG,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,sKAA+B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,8nBAA8nB,OAAS,GAAG,SAAW,CAAC,EAAE"}