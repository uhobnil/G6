{"version":3,"sources":["docs/manual/custom-extension/plugin.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/manual/custom-extension/plugin.zh.md?watch=parent';\n  export const texts = [{\"value\":\"自定义插件可以实现一些额外的功能，例如添加额外的组件、渲染逻辑等。\",\"paraId\":0,\"tocIndex\":0},{\"value\":\"与交互类似，插件的实现也相当灵活，你可以以你喜欢的风格实现你的插件。\",\"paraId\":1,\"tocIndex\":1},{\"value\":\"下面是一个简单的自定义插件实现，在图实例化过程中会自动加载远程数据：\",\"paraId\":2,\"tocIndex\":1},{\"value\":\"import { BasePlugin } from '@antv/g6';\\nimport type { BasePluginOptions, RuntimeContext } from '@antv/g6';\\n\\ninterface RemoteDataSourceOptions extends BasePluginOptions {}\\n\\nclass RemoteDataSource extends BasePlugin<RemoteDataSourceOptions> {\\n  constructor(context: RuntimeContext, options: RemoteDataSourceOptions) {\\n    super(context, options);\\n    this.loadData();\\n  }\\n\\n  private async loadData() {\\n    // mock remote data\\n    const data = {\\n      nodes: [\\n        { id: 'node-1', x: 100, y: 100 },\\n        { id: 'node-2', x: 200, y: 200 },\\n      ],\\n      edges: [{ source: 'node-1', target: 'node-2' }],\\n    };\\n\\n    const { graph } = this.context;\\n    graph.setData(data);\\n    await graph.render();\\n  }\\n}\\n\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"在上面的例子中，我们模拟实现了一个数据加载插件，在使用该插件后，实例化 Graph 时不用再传入数据，该插件会自动加载远程数据。\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"(() => {\\n  const { BasePlugin, Graph, register, ExtensionCategory } = window.g6;\\n\\n  class RemoteDataSource extends BasePlugin {\\n    constructor(context, options) {\\n      super(context, options);\\n      this.loadData();\\n    }\\n\\n    async loadData() {\\n      // mock remote data\\n      const data = {\\n        nodes: [\\n          { id: 'node-1', style: { x: 25, y: 50 } },\\n          { id: 'node-2', style: { x: 175, y: 50 } },\\n        ],\\n        edges: [{ source: 'node-1', target: 'node-2' }],\\n      };\\n\\n      const { graph } = this.context;\\n      graph.setData(data);\\n      await graph.render();\\n    }\\n  }\\n\\n  register(ExtensionCategory.PLUGIN, 'remote-data-source', RemoteDataSource);\\n\\n  const container = window.createContainer({ width: 200, height: 100 });\\n\\n  const graph = new Graph({\\n    container,\\n    width: 200,\\n    height: 100,\\n    plugins: ['remote-data-source'],\\n  });\\n\\n  graph.render();\\n\\n  return container;\\n})();\\n\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"通过 G6 提供的 register 方法注册即可，详见\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"注册插件\",\"paraId\":7,\"tocIndex\":2},{\"value\":\"可在 \",\"paraId\":8,\"tocIndex\":3},{\"value\":\"plugins\",\"paraId\":8,\"tocIndex\":3},{\"value\":\" 中传入交互类型名称或配置参数对象，详见\",\"paraId\":8,\"tocIndex\":3},{\"value\":\"配置插件\",\"paraId\":9,\"tocIndex\":3}];\n  "],"names":[],"mappings":"6PAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,yMAAoC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+MAAqC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+MAAqC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+tBAA+tB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gWAAmE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,k8BAAk8B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,qGAA+B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,sHAAuB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,EAAE,SAAW,CAAC,EAAE"}