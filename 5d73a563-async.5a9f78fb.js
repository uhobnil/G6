(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["5d73a563"],{"5d73a563":function(e,n,a){"use strict";a.d(n,"__esModule",{value:!0}),a.d(n,"texts",{enumerable:!0,get:function(){return t;}}),a("bc177bc9");let t=[{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'cubic' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'cubic',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic.style');\n    optionFolder.add(options, 'curveOffset', 0, 100, 1);\n    optionFolder.add(options, 'curvePosition', 0, 1, 0.1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:0},{value:"If the element has its specific properties, we will list them below. For all generic style attributes, see",paraId:1},{value:"BaseEdge",paraId:2},{value:"[",paraId:3,tocIndex:0},{value:"[number, number] | [number, number, number] | Float32Array",paraId:3,tocIndex:0},{value:",",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"[number, number] | [number, number, number] | Float32Array",paraId:3,tocIndex:0},{value:"]",paraId:3,tocIndex:0},{value:"Control points. Used to define the shape of the curve. If not specified, it will be calculated using ",paraId:4,tocIndex:0},{value:"curveOffset",paraId:4,tocIndex:0},{value:" and ",paraId:4,tocIndex:0},{value:"curvePosition",paraId:4,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"number | [number, number]",paraId:5,tocIndex:1},{value:" ",paraId:5,tocIndex:1},{value:"Default:",paraId:5,tocIndex:1},{value:" ",paraId:5,tocIndex:1},{value:"20",paraId:5,tocIndex:1},{value:"The distance of the control point from the line",paraId:6,tocIndex:1},{value:"number | [number, number]",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"Default:",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"0.5",paraId:7,tocIndex:2},{value:"The relative position of the control point on the line, ranging from ",paraId:8,tocIndex:2},{value:"0-1",paraId:8,tocIndex:2}];}}]);
//# sourceMappingURL=5d73a563-async.5a9f78fb.js.map